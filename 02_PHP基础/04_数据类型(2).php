 # 整数类型

保存整数数值,有一定的范围,4个字节存储,最大为32位,42亿多
在php中默认是有符号的,区分正负数

在php中提供了4种方式定义整型
十进制定义,二进制定义,八进制定义,十六进制定义

<?php
$a1 = 120;   //10进制
$a2 = 0b110; //2进制
$a3 = 0120;  //8进制
$a4 = 0x120;  //16进制

echo $a1,'~',$a2,'~',$a3,'~',$a4; 
//php默认输出的数值都会自动转换为10进制
//120~6~80~288

?>

进制转换: 手动转换
10转2: 除2倒取余,不管结果如何,需要补足32位,前面补0
10转2: 取最的2的N次方,直到结果为0
2转10: 所在位的数字乘以相应次方累加

php中提供了很多函数进行转换
decbin() 10转2
decoct() 10转8
dechex() 10转16
bin2hex()  
还有很多函数,需要就去查

<?

var_dump(decbin(107)); // string(7) "1101011"

?>

# 浮点类型

小数类型,以及超过整型所能存储范围的整数(不保证精度),精度范围在15个有效数字左右

<?

$f1 = 1.23;
$f2 = 1.23e10; //科学记数法,e表示底数10
$f3 = PHP_INT_MAX + 1;

var_dump($f1); //float(1.23)
var_dump($f2); //float(12300000000)
var_dump($f3); //float(9.2233720368548E+18)  整型超过自身存储后会用浮点型存储
?>

同样的字节数存储数据,为什么浮点型却能表示更大的数据呢?

整型:所有位都是有效数字
浮点型: 第一个字节中的后7位表示次方, 后面三个字节表示数值

尽量不要用浮点数做精确判断,因为浮点数保存的数据不够精确,计算机中的小数基本都不准确
<?
$f4 = 0.7;
$f5 = 2.1;
$f6 = $f5 / 3;
var_dump($f4 == $f6); // bool(false) 不等
?>


# 布尔类型 

两个值 true / false 通常用于判断比较
在进行某些数据判断的时候,需要特别注意类型转换
empty() 判断数据的值是否为空, 不是NULL, 空返回true, 非空返回false
isset() 判断数据存储的变量本身是否存在, 存在变量返回true, 不存在返回false

empty()用于判断数据的值
isset()用于判断数据是否存在

可以查阅php手册>附录>PHP 类型比较表 
