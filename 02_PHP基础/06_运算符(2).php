# 逻辑运算符

针对不同的结果进行匹配

&& 逻辑与 两边同时
|| 逻辑或 两边只要任意一个
!  逻辑非 取反

逻辑与/逻辑或也称为'短路运算'
即 如果第一个表达式结果已经满足条件, 那么就不会运算逻辑运算符后面的表达式了
因此 在书写代码时, 尽量将出现概率最高的表达式(能够直接判断出结果的)放到第一位

<?
$a = 'weekend';
$b = 'goods';

// 逻辑与
var_dump($a == 'weekend' && $b == 'good');  //bool(false)

// 逻辑或
var_dump($a == 'weekend' || $b == 'good');  //bool(true)

// 逻辑非
var_dump($b == 'good');  //bool(false)
var_dump(!($b == 'good'));  //bool(true)
?>


# 连接运算符

将多个字符串拼接的符号
. 将两个字符串拼接
.= 将左边的内容与右边的内容连接起来,然后重新赋值给左边的变量
a.=b 即 a = a.b

<?
$a = 'hello';
$b = 123;
echo $a.$b;  // hello123
echo '<br>';  

$a .= $b;
echo $a;  // hello123
?>

# 错误抑制符

有一些错误可以提前预知,但是无法避免,又不希望报错,可以使用错误抑制符处理
@ 在可能出错的表达式前使用该符号
通常在生产环境(上线)用,开发环境不会用,最好保证系统本身没有任何错误

<?
$a = 10;
$b = 0;   
$a % $b; // 报错,被除数为0
@($a % $b);  // 不报错

?>


# 三目运算符

有三个表达式参与的运算(简单的分支结构缩写)
expr1 ? expr2 : expr3
如果表达式1成立,执行表达式2,否则执行表示3
如果表达式本身比较复杂,建议使用括号

<?
$a = 10;
$b = $a>10?100:0;
echo $b;  // 0
?>

三目运算可以复合三目运算,表达式2和3也可以是另一个三目运算


# 自操作运算符

自己操作自己

++ 在原来的值上加一
-- 在原来的值上减一

自操作符可以前置或后置
1. 如果本身只有自操作,不参与其他运算,那么二者效果相同
2. 如果自操作同时还参与别的运算,那么效果不一样

<?
$a = 1;
$b = $a++; // $a=2 $b=1 
$c = ++$a; // $a=2 $c=2

// 后置自操作, 先保留自己的值, 然后改变自己, 给别人的是原来的值
// 前置自操作, 先改变自己, 然后给别人改变后的值

$d = 1;
$e = 1;
echo $d++, ++$e; // 1,2

?>

衍生符号:类似自操作
左边的结果与右边的结果运算,然后赋值给左边,注意右边是一个整体
+= 
-=
*=
/=
%=

<?
$a = 10;
$b = 5;

$a += $b;  //$a = $a + $b =15
$a -= $b -1; // $a = $a - ($b - 1) = 11 而不是 $a - $b - 1 = 9
?>

如果进行除法或者取余运算,那么要考虑右边表达的结果是否为0(为0出错)