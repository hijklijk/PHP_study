# 变量

## 变量的使用

<?php
// 定义变量
$var1;
$var2 = 1;

//访问变量
echo $var2; //输出1

//修改变量，重新赋值即可
$var2 = 2;
echo '<hr/>', $var2; //输出分割线和2

//删除变量
unset($var2);
echo $var2;
?>

## 变量命名规则
- 必须以$符号开头
- 名字由字母、数字、下划线构成，但是不能以数字开头
- php中允许中文变量，但是不建议这么使用

预定义变量
- 系统定义的变量
- 存储许多用到的数据，都是数组
- *$_GET 获取所有表单以get方式提交的数据
- *$_POST 获取所有表单以post方式提交的数据
- *$_REQUEST get和post提交的都会保存
- $_GLOBALS PHP中所有的全局变量
- *$_SERVER 服务器信息
- *$_SESSION session会话数据
- *$_COOKIE cookie会话数据
- $_ENV 环境信息
- $_FILES 用户上传的文件信息

可变变量
- 如果一个变量保存的值刚好是另外一个变量的名字，那么可以通过访问一个变量得到另一个变量的值，在变量前多加一个美元符号$

<?php
$a = 'b';
$b = 'bb';
// $$a 等于 $b 
echo $$a;
?>

变量传值
- 将一个变量赋值给另一个变量
- 两种方式
  - 值传递：将变量保存的值复制一份，然后将新的值给另外一个变量保存（两个变量没有关系）
  - 引用传递：将变量保存的值所在的内存地址，传递给另一个变量，两个变量指向同一块内存空间（两个变量是同一个值）`$new = &$old` 注意加传址符&

值传递

<?php
$a =1;
$b =$a;  //注意是值传递

$b = 2;
echo $a,$b;  //输出为1 2
?>

引用传递
<?php
$a =1;
$b =&$a;  //注意是引用传递

$b = 2;
echo $a,$b;  //输出为2 2
?>

补充：在内存中，通常有以下几个分区
- 栈区：程序可以操作的部分（不存数据，运行程序代码），少但是快
- 代码块：存储程序的内存部分（不执行）
- 数据段：存储普通数据（全局区和静态区）
- 堆区：存储复杂数据，大但是效率低

# 常量

- 与变量一样，都是用来保存数据
- const/constant 在程序运行过程中，不可更变的量
- 一旦定义，通常数据不可改变（用户级别）

## 常量的定义形式

- 定义常量的函数 `define('const_name',value)`
- 5.3之后才有 `const const_name = value`
- 二种方式定义有区别：访问权限的区别
- define的第三个参数为大小写是否敏感，false不敏感，true敏感

常量命名规范
- 常量命名不需要美元符$ 
- 常量由字母数字下划线组成，不以数字开头
- 通常用大写字母为主，与变量区别
- 常量命名比变量松散，可以使用一些特殊字符，但是仅限于define方式


<?php
// define定义常量
define('PI',3.14);

// const关键字定义常量
const PII = 3; 

// 定义特殊常量
define('-_-','smile');

// const -_- = 'smile'; //会报错

// 常量的使用
echo PI;
?>

## 常量的使用形式

- 常量不可改变值，在定义的时候必须赋值
- 普通常量访问和变量一样
- 特殊常量的访问方式 echo constant('const_name')

1. 凡是数据可能变化的，那么肯定用变量 
2. 数据不一定会变，可以使用常量和变量，变量居多 
3. 数据不允许修改的，一定用常量

## 系统常量

系统帮助用户定义的常量，用户可以直接使用
- PHP_VERSION
- PHP_INT_SIZE
- PHP_INT_MAX（PHP中整形是允许出现负数的，带符号）
- 魔术常量：__xxx__ 会跟着环境变化，用户改变不了
 __DIR__ 当前被执行的脚本所在电脑的绝对路径
 __FILE__ 当前被执行的脚本所在电脑的绝对路径（带文件名）
 __LINE__ 当前所属的行数
 __NAMESPACE__ 当前所属的命名空间
 __CLASS__ 当前所属的类
 __METHOD__ 当前所属的方法

<?php
echo '<hr/>',PHP_VERSION,'<br/>',PHP_INT_SIZE,'<br/>',PHP_INT_MAX;

// 7.1.10  版本
// 4 表示整型所占用的字节数
// 2147483647 整型的最大值

echo '<hr>';
echo __DIR__, '<br>', __FILE__, '<br>', __LINE__;
echo __LINE__;

?>
