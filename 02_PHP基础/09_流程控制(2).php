# 循环结构

代码段在一定的控制下，可以多次执行

for循环：通过条件，起始和中止判断执行
while循环：通过判断条件终止
do while循环：同while
foreach循环： 专门针对数组

# for 循环

for基本语法

for(expr1; expr2; expr3){
	// expr1 常定义初始化条件，可以有多种赋值语句存在，使用逗号分隔即可
	// expr2 边界判定，限定循环执行的次数
	// expr3 用来执行条件变化（自操作）
	// 循环体 
}

举个例子
<?
// 输出1~10
for ($i=1; $i<=10; $i++ ){
	echo $i.'<br>';
}

// 最后 $i == 11
echo $i; 

// 输出1~10 （10是动态得到的）
for ($i = 1, $end = 10; $i <= $end; $i++ )
	echo $i,'<br>';
?>

for循环中表达式1可以多变量定义

for循环特殊使用：for循环中的条件可以一个都没有（死循环）
必须有分号
一定要避免出现

<?
// 无条件循环
for (;;){
	echo 'hello, world<br>';
}
?>

# while循环

语法

条件初始化; // 在循环外部定义
while(条件表达式){
	// 条件表达式就是判断边界条件
	循环体  //循环条件的变化
}

<?
// 外部定义条件
$i=1;


// 循环执行判定
while ($i<=10){

	// 循环体
	// echo $i.'<br>';

	// 优化
	echo $i++.'<br>';

	// 循环条件变更
	// $i++;
}
?>

for与while的选择
1. 如果是基于固定已知条件（数值有规律变化），使用for循环
2. while可以做灵活的条件判定，while使用的比较多

# do while 循环

do while看着很像while
while首先进行条件判定，然后执行循环体，有可能出现第一次就条件不满足的情况
那么就会直接失败，循环体一次都不执行
do while则是先执行，后判断，即至少会执行一次循环体

php中用的少

语法

do {
	//循环体
} while (条件表达式);

<?
// 输出1-10之间的偶数（加入条件判定）
$i=1;

do {
	// 执行输出
	if ($i%2!=1){
		// 是偶数
		echo $i.'<br>';
	} 
	// 条件变更
	$i++;
} while ($i <= 10);

?>

# 循环控制

在循环内部对循环本身进行控制

中断控制：重新开始循环，循环体中还有其他内容，也再执行
continue 层级; //默认是1，循环可以多层嵌套

中止控制：循环直接结束
break 层级; //默认是1

<?
// 输出1-100之间5的倍数
$i = 1;
while ($i<=100){
	if($i % 5 != 0){
		$i++;
		continue;
	}
	echo $i++,'<br>';
}
?>

因为循环经常性会碰到嵌套，如果在循环内部某些条件下，可明确知道当前循环或外部循环不需要继续执行，那么可以使用循环控制来实现；

内部循环可以控制到外部，可以通过使用层级参数

continue 2; // 当前循环和外部循环后续的循环体不再执行，重新来过

break 2; // 同理